// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TutorialServiceClient is the client API for TutorialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TutorialServiceClient interface {
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TutorialDetailsList, error)
	GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TutorialDetails, error)
	Create(ctx context.Context, in *NewTutorial, opts ...grpc.CallOption) (*StatusResponse, error)
	Update(ctx context.Context, in *TutorialDetails, opts ...grpc.CallOption) (*StatusResponse, error)
	SoftDelete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error)
}

type tutorialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTutorialServiceClient(cc grpc.ClientConnInterface) TutorialServiceClient {
	return &tutorialServiceClient{cc}
}

func (c *tutorialServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TutorialDetailsList, error) {
	out := new(TutorialDetailsList)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialServiceClient) GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TutorialDetails, error) {
	out := new(TutorialDetails)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialServiceClient) Create(ctx context.Context, in *NewTutorial, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialServiceClient) Update(ctx context.Context, in *TutorialDetails, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialServiceClient) SoftDelete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/SoftDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.TutorialService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TutorialServiceServer is the server API for TutorialService service.
// All implementations must embed UnimplementedTutorialServiceServer
// for forward compatibility
type TutorialServiceServer interface {
	GetAll(context.Context, *Empty) (*TutorialDetailsList, error)
	GetById(context.Context, *Id) (*TutorialDetails, error)
	Create(context.Context, *NewTutorial) (*StatusResponse, error)
	Update(context.Context, *TutorialDetails) (*StatusResponse, error)
	SoftDelete(context.Context, *Id) (*StatusResponse, error)
	Delete(context.Context, *Id) (*StatusResponse, error)
	mustEmbedUnimplementedTutorialServiceServer()
}

// UnimplementedTutorialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTutorialServiceServer struct {
}

func (UnimplementedTutorialServiceServer) GetAll(context.Context, *Empty) (*TutorialDetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTutorialServiceServer) GetById(context.Context, *Id) (*TutorialDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTutorialServiceServer) Create(context.Context, *NewTutorial) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTutorialServiceServer) Update(context.Context, *TutorialDetails) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTutorialServiceServer) SoftDelete(context.Context, *Id) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDelete not implemented")
}
func (UnimplementedTutorialServiceServer) Delete(context.Context, *Id) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTutorialServiceServer) mustEmbedUnimplementedTutorialServiceServer() {}

// UnsafeTutorialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TutorialServiceServer will
// result in compilation errors.
type UnsafeTutorialServiceServer interface {
	mustEmbedUnimplementedTutorialServiceServer()
}

func RegisterTutorialServiceServer(s grpc.ServiceRegistrar, srv TutorialServiceServer) {
	s.RegisterService(&TutorialService_ServiceDesc, srv)
}

func _TutorialService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorialService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).GetById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorialService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTutorial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).Create(ctx, req.(*NewTutorial))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorialService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TutorialDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).Update(ctx, req.(*TutorialDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorialService_SoftDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).SoftDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/SoftDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).SoftDelete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorialService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TutorialService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// TutorialService_ServiceDesc is the grpc.ServiceDesc for TutorialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TutorialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TutorialService",
	HandlerType: (*TutorialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _TutorialService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _TutorialService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TutorialService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TutorialService_Update_Handler,
		},
		{
			MethodName: "SoftDelete",
			Handler:    _TutorialService_SoftDelete_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TutorialService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tutorial.proto",
}
