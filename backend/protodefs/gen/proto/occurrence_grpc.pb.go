// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OccurrenceServiceClient is the client API for OccurrenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OccurrenceServiceClient interface {
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OccurrenceDetailsList, error)
	GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OccurrenceDetails, error)
	GetNearby(ctx context.Context, in *Location, opts ...grpc.CallOption) (*OccurrenceDetailsList, error)
	Create(ctx context.Context, in *NewOccurrence, opts ...grpc.CallOption) (*StatusResponse, error)
	Update(ctx context.Context, in *OccurrenceDetails, opts ...grpc.CallOption) (*StatusResponse, error)
	SoftDelete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error)
}

type occurrenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOccurrenceServiceClient(cc grpc.ClientConnInterface) OccurrenceServiceClient {
	return &occurrenceServiceClient{cc}
}

func (c *occurrenceServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OccurrenceDetailsList, error) {
	out := new(OccurrenceDetailsList)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occurrenceServiceClient) GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OccurrenceDetails, error) {
	out := new(OccurrenceDetails)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occurrenceServiceClient) GetNearby(ctx context.Context, in *Location, opts ...grpc.CallOption) (*OccurrenceDetailsList, error) {
	out := new(OccurrenceDetailsList)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/GetNearby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occurrenceServiceClient) Create(ctx context.Context, in *NewOccurrence, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occurrenceServiceClient) Update(ctx context.Context, in *OccurrenceDetails, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occurrenceServiceClient) SoftDelete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.OccurrenceService/SoftDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OccurrenceServiceServer is the server API for OccurrenceService service.
// All implementations must embed UnimplementedOccurrenceServiceServer
// for forward compatibility
type OccurrenceServiceServer interface {
	GetAll(context.Context, *Empty) (*OccurrenceDetailsList, error)
	GetById(context.Context, *Id) (*OccurrenceDetails, error)
	GetNearby(context.Context, *Location) (*OccurrenceDetailsList, error)
	Create(context.Context, *NewOccurrence) (*StatusResponse, error)
	Update(context.Context, *OccurrenceDetails) (*StatusResponse, error)
	SoftDelete(context.Context, *Id) (*StatusResponse, error)
	mustEmbedUnimplementedOccurrenceServiceServer()
}

// UnimplementedOccurrenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOccurrenceServiceServer struct {
}

func (UnimplementedOccurrenceServiceServer) GetAll(context.Context, *Empty) (*OccurrenceDetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOccurrenceServiceServer) GetById(context.Context, *Id) (*OccurrenceDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOccurrenceServiceServer) GetNearby(context.Context, *Location) (*OccurrenceDetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearby not implemented")
}
func (UnimplementedOccurrenceServiceServer) Create(context.Context, *NewOccurrence) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOccurrenceServiceServer) Update(context.Context, *OccurrenceDetails) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOccurrenceServiceServer) SoftDelete(context.Context, *Id) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDelete not implemented")
}
func (UnimplementedOccurrenceServiceServer) mustEmbedUnimplementedOccurrenceServiceServer() {}

// UnsafeOccurrenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OccurrenceServiceServer will
// result in compilation errors.
type UnsafeOccurrenceServiceServer interface {
	mustEmbedUnimplementedOccurrenceServiceServer()
}

func RegisterOccurrenceServiceServer(s grpc.ServiceRegistrar, srv OccurrenceServiceServer) {
	s.RegisterService(&OccurrenceService_ServiceDesc, srv)
}

func _OccurrenceService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccurrenceService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).GetById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccurrenceService_GetNearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).GetNearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/GetNearby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).GetNearby(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccurrenceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOccurrence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).Create(ctx, req.(*NewOccurrence))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccurrenceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccurrenceDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).Update(ctx, req.(*OccurrenceDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccurrenceService_SoftDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccurrenceServiceServer).SoftDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OccurrenceService/SoftDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccurrenceServiceServer).SoftDelete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// OccurrenceService_ServiceDesc is the grpc.ServiceDesc for OccurrenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OccurrenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OccurrenceService",
	HandlerType: (*OccurrenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _OccurrenceService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OccurrenceService_GetById_Handler,
		},
		{
			MethodName: "GetNearby",
			Handler:    _OccurrenceService_GetNearby_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OccurrenceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OccurrenceService_Update_Handler,
		},
		{
			MethodName: "SoftDelete",
			Handler:    _OccurrenceService_SoftDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "occurrence.proto",
}
